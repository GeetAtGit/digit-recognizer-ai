# -*- coding: utf-8 -*-
"""DigitRecognizer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xpYdtW3_eowlVQWIXIEoMWnT-niTMm_X
"""



import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models

print("✅ All libraries imported successfully!")

# Load the MNIST digit dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize pixel values from [0–255] to [0–1]
x_train = x_train / 255.0
x_test = x_test / 255.0

# Add channel dimension (needed for CNN)
x_train = x_train[..., np.newaxis]
x_test = x_test[..., np.newaxis]

# Show shape of the data
print(f"Training images: {x_train.shape}")
print(f"Training labels: {y_train.shape}")

# Plot first 5 digits from training set
for i in range(5):
    plt.imshow(x_train[i].reshape(28, 28), cmap='gray')
    plt.title(f"Label: {y_train[i]}")
    plt.axis('off')
    plt.show()

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')  # 10 output classes (0-9)
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Show model structure
model.summary()

history = model.fit(x_train, y_train, epochs=5, validation_split=0.1)

test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"\n✅ Test accuracy: {test_acc:.2f}")

predictions = model.predict(x_test[:5])

for i in range(5):
    plt.imshow(x_test[i].reshape(28, 28), cmap='gray')
    plt.title(f"Predicted: {np.argmax(predictions[i])} | Actual: {y_test[i]}")
    plt.axis('off')
    plt.show()

model.save("digit_model.keras", save_format="keras")

